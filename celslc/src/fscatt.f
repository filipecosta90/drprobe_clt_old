c-------********************************************************** Jan-13-91 ***
c
c	Modified: 
c		A.W.	07.08.90
c		P.S.	01.14.91
c       J.B.    23.11.2010
c       J.B.    03.03.2011 (added parameters for H, fitted from E. Kirklands table.)
c       J.B.    14.11.2014 (added function "dwfjbr" returning a dwf.)
c       J.B.    30.06.2017 (added parameters for L, z=0, vacancy, V&B-parameters play no role)
c	
c	Author:
c	A.Weickenmeier
c	Technische Hochschule Darmstadt
c	Hochschulstr. 6
c	D-6100 Darmstadt
c	Germany (West)
c	bitnet: xbr3da6l@ddathd21.bitnet
c	tel.: 06151/16-3381
c
c	Calculates the complex scattering amplitude 
c	
c	This subroutine is public domain
c	Feedback is appreciated
c	
c	Input:
c	======
c
c	g:  	scattering vector 4*pi*g = s = sin(theta)/lambda
c	ul:	the rms thermal displacement of the atom 
c	z:	atom
c	accvlt:	acceleration voltage in kv
c			not required if accflg = .false.
c	absflg:	if true imaginary part of fscatt will be calculated
c	accflg:	if true then f depends on the acceleration voltage
c		if false real(f) must be multiplied by gamma,
c			 imag(f) by gamma^2/k0
c	dwflg:	if true f will be multiplied with the debye-waller factor
c
c	Output:
c	=======
c
c	fscatt:	complex scattering amplitude
c	symbol:	symbol of the element z
c
c	Units:
c	======
c
c	unit of length is angstroem
c	
c	Note:
c	=====
c	
c	The scattering amplitudes are multiplied by an additional 
c	factor 4pi.
c	
c-------*********************************************************************
c-------*********************************************************************

	function fscatt (g,ul,z,symbol,accvlt,absflg,accflg,dwflg)
	parameter (fourpi = 4.0 * 3.1415927)

	logical		absflg
	logical		accflg
	logical		dwflg
	integer		z
	real         	k0
	real         	a(2)
	real          a2(14)
	real         	b(6)
	character*2  	symbol
	complex 	fscatt

c	check input
	if (z .lt. 2) then
	   write (6,1000) z
	   stop
	end if
	if (ul .lt. 0.) then
	   write (6,1010) ul
	   stop
	end if
	if (g .lt. 0.) then
	   write (6,1020) g
	   stop
	end if
	if (accvlt .lt. 0.) then
	   write (6,1030) accvlt
	   stop
	end if

c	get fitting coefficients
	call getwk (z,symbol,a,b)
	!call getwaki(z,a2)

	s      = g / fourpi
	freal  = fourpi * weko (a,b,s)
	!freal  = fourpi * waki (a2,s)

	if (absflg) then
	   fima   = fimag (g,ul,a,b) 
	else
	   fima   = 0.
	end if
	if (accflg) then
c	   calculate wavenumber and gamma
	   k0   = 0.506774 * sqrt((1021.997894 + accvlt)*accvlt)
	   gamma = (accvlt+510.998947) / 510.998947
	   freal = freal * gamma
	   fima  = fima  * gamma * gamma / k0
	end if
	if (dwflg) then
c	   calculate debye-waller factor
	   dewa  = exp(-.5*ul*ul*g*g)
	   freal = freal * dewa
	   fima  = fima  * dewa
	end if

	fscatt = cmplx( freal,fima )

	return
1000	format (2x, 'z = ',i3,' this value is not supplied!')
1010	format (2x, 'ul = ',e13.4,' this value is not supplied!')
1020	format (2x, 'g = ',e13.4,' this value is not supplied!')
1030	format (2x, 'accvlt = ',e13.4,' this value is not supplied!')
	end


c-----------------------------------------------------------------------	
c------ JB edit, new function with less checks and output	
c--- input
c-   - real     g       spatial frequency [1/nm]
c-   - real     dw      debye-waller parameter in nm^2
c-   - integer  z       atomic number
c-   - akv      akv     high tension in kV
c-   - logical  dwflg   flag: use debye-waller factor
c-   - logical  absflg  flag: calculate absorptiion potential
c-
c--- output / return value
c-   - complex*8        complex scattering factor for the given
c-                      atom type at the given spatial frequency
c-
	function fscattjb (g,dw,z,akv,dwfflg,absflg)
	parameter		    (twopi	= 6.28318530718)
	parameter		    (fourpi	= 12.56637061436)
	parameter		    (r8pi2	= 0.0126651479553)
	parameter         (thrima = 1.0e-8)
	logical           dwfflg, absflg
	real*4			g, dw, dwa, ga, sa, ua, dewa
	real*4			akv, k0, rc, tc, aa
	real*4			fr, fi
	integer*4		    z
	real*4        	a (2)
	real*4            a2(14)
	real*4        	b (6)
	complex*8         fscattjb
	
c     relativistic correction
      rc	= (510.998947 + akv) / 510.998947
c
c-------Debye-Waller Temperature Coeff dwa = 8 pi**2 usa**2
c-------                               usa = rms amplitude of atom displacement in [ang]
c-------[nm] to [ang]
c
      dewa  = 1.0 ! preset DWF to 1
	dwa	= 100.0 * dw ! translate DW-parameter to angstrom squared
	ga	= 0.100 * g * twopi ! translate g from 1/nm to 1/A and times 2*pi
	sa	= 0.050 * g ! sa is ga / 4pi = g / 20
	ua	= sqrt (dwa * r8pi2) ! translate from DW-parameter to RMS vibr amp [A]
	aa    = ga * ua ! argument of the DWF
c
	call	getwk2	(z, a, b) ! get the WK-coefficients for atom z
	!call  getwaki(z,a2)
c
	fr 	= rc * weko (a, b, sa) * fourpi ! real part of the scattering factor
	!fr    = rc * waki (a2, sa) * fourpi
	fi	= 0.0 ! preset imag part to zero
c
      if (dwfflg) then ! use DWF
          dewa = exp  (-0.5 * aa * aa) ! calculate the DWF as exp( -0.5 * <u>^2 * (2*Pi*g)^2 ) = exp( -0.25 * B * g^2 )
          fr   = fr * dewa
      end if
c     calculate imag scatt      
      if ((absflg).and.(abs(ua)>=thrima).and.(abs(fr)>=thrima)) then
c         wave number in [A^-1] 0.506774 = 2*Pi*e/(h*c) * 1E-7 [A^-1 * kV^-1]
          k0    = 0.506774 * sqrt((1021.997894 + akv) * akv) ! 2*Pi*k ! andere k-Notation hier: Aufpassen!
		  fi    = rc * rc * fimag (ga, ua, a, b) / k0
		  if (dwfflg) fi = fi * dewa
      end if
c
c-------[ang] to [nm]
c
	fscattjb	= 0.1 * cmplx (fr, fi)
	return
	end
	
	
c-----------------------------------------------------------------------
c------ JB edit, new function with less checks and output, real only	
	function fscattjbr (g,dw,z,akv,dwfflg)
	parameter		    (twopi	= 6.28318530718)
	parameter		    (fourpi	= 12.56637061436)
	parameter		    (r8pi2	= 0.0126651479553)
	logical           dwfflg
	real*4			dw, g, dwa, ga, sa, ua, dewa
	real*4			akv, rc, aa
	real*4			fr
	integer*4		    z
	real*4        	a (2)
	real*4            a2(14)
	real*4        	b (6)
	real*4            fscattjbr

c
c-------Debye-Waller Temperature Coeff dwa = 8 pi**2 usa**2
c-------[nm] to [ang]
c
      dewa  = 1.0
	dwa	= 100.0 * dw
	ga	= 0.100 * g * twopi
	sa	= 0.050 * g
	ua	= sqrt (dwa * r8pi2)
	aa    = ga * ua
c
	call	getwk2	(z, a, b)
	!call  getwaki (z, a2)
c
	rc	= (510.998947 + akv) / 510.998947
c
      fr 	= rc * weko (a, b, sa) * fourpi
	!fr 	= rc * waki (a2, sa) * fourpi
c
      if (dwfflg) then
          dewa = exp  (-0.5 * aa * aa )
          fr   = fr  * dewa
      end if
c
c-------[ang] to [nm]
c
	fscattjbr	= 0.1 * fr
	return
	end
	

c-----------------------------------------------------------------------
c------ JB edit, new function returning the DWF only	
	function dwfjbr   (g,dw,dwfflg)
	parameter		    (twopi	= 6.28318530718)
	parameter		    (r8pi2	= 0.0126651479553)
	logical           dwfflg
	real*4			dw, g, dwa, ga, ua, dewa
	real*4			aa
	real*4            dwfjbr

c
c-------Debye-Waller Temperature Coeff dwa = 8 pi**2 usa**2
c
      dewa  = 1.0
      if (dwfflg) then
        dewa = exp( -0.25 * dw * g * g )
      end if
	dwfjbr = dewa
	return
	end
	
	
c-------*********************************************************************
c-------*********************************************************************

	function	weko (a, b, s)

c	electron scattering apmlitude f(s)

        real	a (2)
        real	b (6)

	weko	= 0.0
	if (s .gt. 0.0) then
	   s2 = 1./(s*s)
	end if

	do 10 i=1,6
	   j = 1+(i-1)/3
	   argu = b(i)*s*s
	   if (argu .lt. .1) then
	      weko = weko + a(j)*b(i) * (1.-.5*argu)
	   else if (argu .gt. 20.) then
	      weko = weko + a(j)*s2
	   else
	      weko = weko + a(j)*(1.-exp(-argu))*s2
	   end if
10	continue

	return
	end

c-------*********************************************************************
c-------*********************************************************************

      	function fimag (g,ul,a,b)

      	parameter (fourpi = 12.56636)
      	parameter (fp2    = fourpi*fourpi)

      	integer z
	real a 	(2)
      	real b 	(6)
	real a1 (2)
      	real b1 (6)

      	u2 = ul*ul

      	do 10 i=1,2
           a1(i) = a(i) * fp2 
10      continue
        do 20 i=1,6
           b1(i) = b(i) / fp2
20      continue
	
        fimag = 0.
	g2    = g*g
	dewa  = exp(-.5*u2*g2)

	do 40 j=1,6
	   jj = 1+(j-1)/3
	   do 30 i=1,6
	      ii = 1+(i-1)/3
	      fimag = fimag + a1(jj)*a1(ii)*(  dewa * ri1(b1(i),b1(j),g) -
     +				               ri2(b1(i),b1(j),g,ul)  )
30	   continue	
40	continue	

      	return
      	end

c-------*********************************************************************
c-------*********************************************************************

	function ri1 (bi,bj,g)

c	erstes integral fuer die absorptionspotentiale

	parameter (pi=3.1415927)
	parameter (c =0.5772157)

	if (g .eq. 0.) then
	   ri1 = bi * log( (bi+bj)/bi ) + bj * log( (bi+bj)/bj )
	   ri1 = ri1 * pi
	   return
	end if

	g2   = g*g
	big2 = bi*g2
	bjg2 = bj*g2

	ri1 = 2.*c + log( big2 ) + log( bjg2 ) - 2.*ei( -bi*bj*g2/(bi+bj) )
	x1  = big2
	x2  = big2*bi/(bi+bj)
	x3  = big2
	ri1 = ri1 + rih1(x1,x2,x3)

	x1  = bjg2
	x2  = bjg2*bj/(bi+bj)
	x3  = bjg2
	ri1 = ri1 + rih1(x1,x2,x3)

	ri1 = ri1 * pi / g2

	return
	end

c-------*********************************************************************
c-------*********************************************************************

	function ri2 (bi,bj,g,u)

c	zweites integral fuer die absorptionspotentiale

	parameter (pi=3.1415927)

	u2 = u*u

	if (g .eq. 0.) then
	   ri2 = (bi+u2) * log( (bi+bj+u2)/(bi+u2) )
	   ri2 = ri2 + bj * log( (bi+bj+u2)/(bj+u2) )
	   ri2 = ri2 + u2 * log( u2/(bj+u2) )
	   ri2 = ri2 * pi
	   return
	end if

	g2   = g*g
	biuh = bi + .5*u2
	bjuh = bj + .5*u2
	biu  = bi + u2
	bju  = bj + u2

	ri2 = ei( -.5*u2*g2*biuh/biu ) + ei( -.5*u2*g2*bjuh/bju )
	ri2 = ri2 - ei( -biuh*bjuh*g2/(biuh+bjuh) ) - ei( -.25*u2*g2 )
	ri2 = 2.*ri2
	x1  = .5*u2*g2
	x2  = .25*u2*g2
	x3  = .25*u2*u2*g2/biu
	ri2 = ri2 + rih1(x1,x2,x3)

	x1  = .5*u2*g2
	x2  = .25*u2*g2
	x3  = .25*u2*u2*g2/bju
	ri2 = ri2 + rih1(x1,x2,x3)

	x1  = biuh*g2
	x2  = biuh*biuh*g2/(biuh+bjuh)
	x3  = biuh*biuh*g2/biu
	ri2 = ri2 + rih1(x1,x2,x3)

	x1  = bjuh*g2
	x2  = bjuh*bjuh*g2/(biuh+bjuh)
	x3  = bjuh*bjuh*g2/bju
	ri2 = ri2 + rih1(x1,x2,x3)

	ri2 = ri2 * pi / g2

	return
	end

c-------*********************************************************************
c-------*********************************************************************

	function rih1 (x1,x2,x3)

c	wertet den ausdruck exp(-x1) * ( ei(x2)-ei(x3) ) aus

	if (x2 .le. 20.  .and.  x3 .le. 20.) then
	   rih1 = exp(-x1) * ( ei(x2)-ei(x3) )
	   return
	end if

	if (x2 .gt. 20) then
 	   rih1 = exp(x2-x1)*rih2(x2)/x2
	else 
	   rih1 = exp(-x1)*ei(x2)
	end if

	if (x3 .gt. 20) then
 	   rih1 = rih1 - exp(x3-x1)*rih2(x3)/x3
	else 
	   rih1 = rih1 - exp(-x1)*ei(x3)
	end if

	return
	end

c-------*********************************************************************
c-------*********************************************************************

	function	rih2 (x)

c	wertet x*exp(-x)*ei(x) aus fuer grosse x
c	durch interpolation der tabelle ... aus abramowitz

	real f (0:20)

	data f / 1.000000,1.005051,1.010206,1.015472,1.020852,
     +           1.026355,1.031985,1.037751,1.043662,1.049726,
     +           1.055956,1.062364,1.068965,1.075780,1.082830,
     +           1.090140,1.097737,1.105647,1.113894,1.122497,
     +           1.131470 /

	x1 = 1./x
	i  = int( 200.*x1 )
	i1 = i+1

	rih2 = f(i) + 200.*( f(i1)-f(i) ) * ( x1-.5e-2*real(i) )
	!rih2 = f(i) + 200.*( f(i1)-f(i) ) * ( x1-.5e-3*real(i) ) ! original by Weickenmeier, corrected by JB (26.08.2017)

	return
	end

c-------*********************************************************************
c-------*********************************************************************

	function	ei (x)

c	exponentialintegral
c	  getestet -60 < x < 60

	parameter (a1=8.57332,a2=18.05901,a3=8.63476,a4=.26777)
	parameter (b1=9.57332,b2=25.63295,b3=21.09965,b4=3.95849)

	if (x .gt. 60.) then 
	   write (6,*) '>>> ei fuer x= ',x,' nicht getestet <<<'
	   stop
	end if

	if (x .lt. -60.) then
	   ei = 0.
	   return
	end if

	if (x .lt. -1.) then
c	   abramowitz (5.1.56)
	   xp = abs(x)
	   ei = -( a4+xp*(a3+xp*(a2+xp*(a1+xp))) ) /
     +           ( b4+xp*(b3+xp*(b2+xp*(b1+xp))) ) * exp(-xp)/xp
	   return
	end if
	   
	ei   = .577216 + log( abs(x) )

	i    = 1
	si   = x
	summ = si

10	continue
	ri   = real(i)
	ri1  = ri + 1.
	si   = si * x * ri/(ri1*ri1)
	summ = summ + si

	if (abs(si/x) .gt. 1.e-6) then
	   i = i+1	   
	   goto 10
	else
	   ei = ei + summ
	   return
	end if

	return
	end

c-------*********************************************************************
c-------*********************************************************************
c
c     modified 2017-06-30 by J. Barthel, Forschungzentrum Juelich GmbH
c     - added H (Z=1, hydrogen) and L (Z=0, vacancy)
	subroutine getwk (z, symbol, a, b)
	integer		z
	real		a (2)
	real		b (6)
	character*2	symbol
c
	real		v  (0:98)
	real		bb (6,0:98)
	character*2	sy (0:98)
c
        data sy /
     +  'L ',
     +  'H ', 'He', 'Li', 'Be', 'B ', 'C ', 'N ', 'O ', 'F ', 'Ne',
     +  'Na', 'Mg', 'Al', 'Si', 'P ', 'S ', 'Cl', 'Ar', 'K ', 'Ca',
     +  'Sc', 'Ti', 'V ', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn',
     +  'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y ', 'Zr',
     +  'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn',
     +  'Sb', 'Te', 'I ', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd',
     +  'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',
     +  'Lu', 'Hf', 'Ta', 'W ', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg',
     +  'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th',
     +  'Pa', 'U ', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf'/
c
        data v /
     +    0.5, 
     +    0.5, 0.5, 0.5, 0.3, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
     +    0.5, 0.5, 0.4, 0.5, 0.5, 0.5, 0.5, 0.5, 0.2, 0.3,
     +    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
     +    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.2, 0.3, 0.5, 0.5,
     +    0.5, 0.5, 0.5, 0.4, 0.5, 0.5, 0.5, 0.3, 0.4, 0.6,
     +    0.6, 0.6, 0.4, 0.4, 0.1, 0.1, 0.3, 0.3, 0.2, 0.2,
     +    0.2, 0.2, 0.1, 0.2, 0.1, 0.2, 0.1, 0.2, 0.1, 0.1,
     +    0.1, 0.1, 0.4, 0.2, 0.5, 0.4, 0.5, 0.5, 0.4, 0.4,
     +    0.4, 0.3, 0.4, 0.4, 0.4, 0.4, 0.1, 0.2, 0.2, 0.3,
     +    0.2, 0.2, 0.2, 0.2, 0.2, 0.3, 0.2, 0.3/
c
	data ((bb(i,j),i=1,6),j=0,0) /
     +     48.75740,  4.96588, 18.24440, 18.24440, 18.24440, 18.24440/
c
	data ((bb(i,j),i=1,6),j=1,10) /
     +     48.75740,  4.96588, 18.24440, 18.24440, 18.24440, 18.24440,
     +      2.54216,  8.74302, 12.69098,  0.43711,  5.29446, 28.25045,
     +      0.68454,  3.06497,  6.23974,126.17816,131.20160,131.76538,
     +      0.53996,  3.38752, 55.62340, 50.78098, 67.00502, 96.36635,
     +      0.33138,  2.97485, 34.01118, 35.98365, 36.68364, 60.80991,
     +      0.29458,  3.93381, 24.97836, 25.27916, 25.46696, 46.70328,
     +      0.23925,  4.93515, 18.11895, 15.69698, 15.81922, 40.24150,
     +      6.37582,  8.03744, 27.20649,  0.11157,  0.38686, 10.89944,
     +      0.21800,  6.76987,  7.05056,  6.67484, 12.38148, 28.08398,
     +      0.20055,  5.49814,  6.28052,  7.19211,  7.54763, 23.26388/
c
	data ((bb(i,j),i=1,6),j=11,20) /
     +      0.21902,  5.30022,  5.31938,  5.28281,  5.28546,128.18391,
     +      1.97633,  2.80902, 16.39184,  0.05494,  2.06121,121.70512,
     +      2.29692,  2.35822, 24.98576,  0.07462,  0.55953,128.50104,
     +      1.73656,  3.04329, 30.57191,  0.05070,  0.99181, 86.18340,
     +      0.17949,  2.63250,  2.67559, 34.57098, 36.77888, 54.06180,
     +      1.00609,  4.90414, 31.34909,  0.03699,  0.98700, 44.94354,
     +      0.18464,  1.47963,  5.20989, 24.79470, 32.06184, 39.09933,
     +      0.20060,  6.53262, 22.72092,  1.20022,  1.27398, 36.25907,
     +      0.44424,  3.36735, 19.63031,  0.01824, 23.51332,212.86819,
     +      0.18274,  2.06638, 16.99062, 11.57795, 13.97594,186.10446/

	data ((bb(i,j),i=1,6),j=21,30) /
     +      0.14245,  1.46588, 15.46955,  4.24287,  9.80399,121.46864,
     +      0.12782,  1.45591, 12.09738,  4.61747, 11.96791,105.00546,
     +      0.13126,  1.39923,  8.00762,  7.98129, 13.41408, 95.30811,
     +      0.12311,  2.38386,  9.92149,  1.64793, 11.00035, 68.45583,
     +      0.48173,  3.78306,  8.47337,  0.04690,  8.74544, 77.44405,
     +      0.44704,  6.89364,  6.90335,  0.05691,  3.02647, 70.86599,
     +      0.10705,  3.63573,  7.55825,  1.27986,  5.14045, 67.16051,
     +      0.11069,  1.61889,  6.00325,  5.97496,  6.06049, 59.41419,
     +      0.11293,  1.89077,  5.08503,  5.07335,  5.09928, 46.38955,
     *      0.10209,  1.73365,  4.78298,  4.80706,  5.64485, 51.21828/
c
	data ((bb(i,j),i=1,6),j=31,40) /
     +      0.10642,  1.53735,  5.13798,  4.74298,  4.99974, 61.42872,
     +      0.09583,  1.67715,  4.70275,  2.91198,  7.87009, 64.93623,
     +      0.09428,  2.21409,  3.95060,  1.52064, 15.81446, 52.41380,
     +      0.09252,  1.60168,  3.04917,  3.18476, 18.93890, 47.62742,
     +      0.09246,  1.77298,  3.48134,  1.88354, 22.68630, 40.69434,
     +      0.49321,  2.08254, 11.41282,  0.03333,  2.09673, 42.38068,
     +      0.15796,  1.71505,  9.39164,  1.67464, 23.58663,152.53635,
     +      0.36052,  2.12757, 12.45815,  0.01526,  2.10824,133.17088,
     +      0.09003,  1.41396,  2.05348, 10.25766, 10.74831, 90.63555,
     +      0.10094,  1.15419,  2.34669, 10.58145, 10.94962, 82.82259/
c
	data ((bb(i,j),i=1,6),j=41,50) /
     +      0.09243,  1.16977,  5.93969,  1.30554, 13.43475, 66.37486,
     +      0.43543,  1.24830,  7.45369,  0.03543,  9.91366, 61.72203,
     +      0.45943,  1.18155,  8.31728,  0.03226,  8.32296, 64.97874,
     +      0.08603,  1.39552, 11.69728,  1.39552,  3.45200, 55.55519,
     +      0.09214,  1.11341,  7.65767,  1.12566,  8.32517, 48.38017,
     +      0.09005,  1.12460,  9.69801,  1.08539,  5.70912, 33.48585,
     +      0.08938,  3.19060,  9.10000,  0.80898,  0.81439, 41.34453,
     +      0.28851,  1.61312,  8.99691,  0.01711,  9.46666, 58.13256,
     +      0.08948,  1.23258,  8.23129,  1.22390,  7.06201, 59.69622,
     +      0.07124,  0.85532,  6.40081,  1.33637,  6.38240, 50.92361/
c
	data ((bb(i,j),i=1,6),j=51,60) /
     +      0.35749,  1.32481,  6.51696,  0.03550,  6.51913, 50.80984,
     +      0.50089,  3.95301,  7.62830,  0.03005,  0.50737, 49.62628,
     +      0.08429,  1.12959,  8.86209,  1.12981,  9.13243, 56.01965,
     +      0.27796,  1.62147, 11.45200,  0.02032,  3.27497, 51.44078,
     +      0.12045,  1.53654,  9.81569, 41.21656, 42.62216,224.34816,
     +      0.12230,  1.44909,  9.50159, 49.40860, 74.94942,217.04485,
     +      0.08930,  1.26225,  8.09703,  1.20293, 17.65554,116.61481,
     +      0.08504,  1.28286, 11.22123,  1.32741,  4.61040,112.19678,
     +      0.09805,  1.52628,  8.58953,  1.23893, 22.49126,140.02856,
     +      0.09413,  1.26616,  5.98844, 17.78775, 18.14397,132.59305/
c
	data ((bb(i,j),i=1,6),j=61,70) /
     +      0.09447,  1.25111,  5.91205, 16.28675, 16.73089,127.90916,
     +      0.09061,  1.59281, 10.64077,  1.78861,  2.22148,124.56328,
     +      0.10485,  1.54396,  8.65223,  7.09290, 53.36537,183.69014,
     +      0.09338,  1.38681,  7.35883,  1.55122, 20.81916,111.03201,
     +      0.10190,  1.52368,  7.16923, 20.86269, 49.29465,166.09206,
     +      0.08402,  1.40890,  7.14042,  1.34848, 11.42203,108.01204,
     +      0.09441,  1.61807,  6.27142, 40.34946, 42.82722,130.59616,
     +      0.08211,  1.25106,  4.81241, 10.84493, 10.90164,100.07855,
     +      0.09662,  1.60236,  5.67480, 30.59014, 31.12732,138.69682,
     +      0.09493,  1.60220,  5.43916, 28.31076, 29.27660,138.08665/
c
	data ((bb(i,j),i=1,6),j=71,80) /
     +      0.09658,  1.56751,  5.32170, 34.18217, 35.25187,121.42893,
     +      0.09294,  1.55499,  5.25121, 37.51883, 38.88302,105.16978,
     +      0.06298,  0.81950,  2.89124,  5.54290,  5.98101, 54.42459,
     +      0.07902,  1.37096,  8.23364,  1.38300,  1.39219, 77.11813,
     +      0.05266,  0.90718,  4.43830,  0.94590,  4.37477, 43.97909,
     +      0.22700,  1.56975,  6.34451,  0.01564,  1.61769, 46.15815,
     +      0.05055,  0.86775,  5.09325,  0.88123,  3.56919, 39.77390,
     +      0.05253,  0.83773,  3.95899,  0.81515,  6.44217, 34.21146,
     +      0.54927,  1.72752,  6.71952,  0.02637,  0.07253, 35.45745,
     +      0.21941,  1.41611,  6.68241,  0.01472,  1.57578, 37.15826/
c
	data ((bb(i,j),i=1,6),j=81,90) /
     +      0.22459,  1.12822,  4.30289,  0.01485,  7.15607, 43.08737,
     +      0.06432,  1.19406,  7.39342,  1.14160,  1.28905, 51.13401,
     +      0.05380,  0.86719,  1.87540,  7.64796,  7.86794, 45.63897,
     +      0.50112,  1.63784,  6.78551,  0.02187,  0.08602, 46.72951,
     +      0.22321,  1.10827,  3.59116,  0.01011, 11.63732, 45.06839,
     +      0.21152,  1.14015,  3.41473,  0.01188, 13.41211, 43.11389,
     +      0.09435,  1.02649,  6.25480, 32.51444, 36.29119,149.11722,
     +      0.07300,  1.01825,  5.89629,  1.03089, 20.37389,115.34722,
     +      0.07515,  0.94941,  3.72527, 17.58346, 19.75388,109.12856,
     +      0.06385,  0.90194,  4.65715,  0.90253, 15.70771, 83.69695/
c
	data ((bb(i,j),i=1,6),j=91,98) /
     +      0.07557,  0.84920,  4.00991, 16.95003, 17.78767,100.20415,
     +      0.07142,  1.14907,  9.21231,  0.95923,  1.20275,104.32746,
     +      0.06918,  0.98102,  5.95437,  0.99086, 22.06437, 90.98156,
     +      0.07136,  0.95772,  6.13183,  0.97438, 15.67499, 89.86625,
     +      0.07301,  0.93267,  6.34836,  0.91032, 13.26179, 86.85986,
     +      0.05778,  0.72273,  3.01146,  9.21882,  9.53410, 65.86810,
     +      0.07088,  0.77587,  6.14295,  1.79036, 15.12379, 83.56983,
     +      0.06164,  0.81363,  6.56165,  0.83805,  4.18914, 61.41408/
c
	symbol	= sy(z)
c
c     for z = 0 a(i) will be zero and v, b(i) won't matter ! 
	a(1)	= 0.023933659 * real(z) / (3.0 * (1.0 + v(z)))
	a(2)	= v(z)    * a(1)
c
	do 10 i = 1, 6
		b(i)	= bb(i, z)
10	continue
c
	return
	end
	
	
	subroutine getwk2 (z, a, b)
	integer		z
	real		a (2)
	real		b (6)
c
	real		v  (0:98)
	real		bb (1:6,0:98)
c
        data v /
     +    0.5,
     +    0.5, 0.5, 0.5, 0.3, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
     +    0.5, 0.5, 0.4, 0.5, 0.5, 0.5, 0.5, 0.5, 0.2, 0.3,
     +    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
     +    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.2, 0.3, 0.5, 0.5,
     +    0.5, 0.5, 0.5, 0.4, 0.5, 0.5, 0.5, 0.3, 0.4, 0.6,
     +    0.6, 0.6, 0.4, 0.4, 0.1, 0.1, 0.3, 0.3, 0.2, 0.2,
     +    0.2, 0.2, 0.1, 0.2, 0.1, 0.2, 0.1, 0.2, 0.1, 0.1,
     +    0.1, 0.1, 0.4, 0.2, 0.5, 0.4, 0.5, 0.5, 0.4, 0.4,
     +    0.4, 0.3, 0.4, 0.4, 0.4, 0.4, 0.1, 0.2, 0.2, 0.3,
     +    0.2, 0.2, 0.2, 0.2, 0.2, 0.3, 0.2, 0.3/
c
c    0 -> vacancy z = 0 -> b won't matter
	data ((bb(i,j),i=1,6),j=0,0) /
     +     48.75740,  4.96588, 18.24440, 18.24440, 18.24440, 18.24440/
c
c    1 - 10
	data ((bb(i,j),i=1,6),j=1,10) /
     +     48.75740,  4.96588, 18.24440, 18.24440, 18.24440, 18.24440,
     +      2.54216,  8.74302, 12.69098,  0.43711,  5.29446, 28.25045,
     +      0.68454,  3.06497,  6.23974,126.17816,131.20160,131.76538,
     +      0.53996,  3.38752, 55.62340, 50.78098, 67.00502, 96.36635,
     +      0.33138,  2.97485, 34.01118, 35.98365, 36.68364, 60.80991,
     +      0.29458,  3.93381, 24.97836, 25.27916, 25.46696, 46.70328,
     +      0.23925,  4.93515, 18.11895, 15.69698, 15.81922, 40.24150,
     +      6.37582,  8.03744, 27.20649,  0.11157,  0.38686, 10.89944,
     +      0.21800,  6.76987,  7.05056,  6.67484, 12.38148, 28.08398,
     +      0.20055,  5.49814,  6.28052,  7.19211,  7.54763, 23.26388/
c
c    11 - 20
	data ((bb(i,j),i=1,6),j=11,20) /
     +      0.21902,  5.30022,  5.31938,  5.28281,  5.28546,128.18391,
     +      1.97633,  2.80902, 16.39184,  0.05494,  2.06121,121.70512,
     +      2.29692,  2.35822, 24.98576,  0.07462,  0.55953,128.50104,
     +      1.73656,  3.04329, 30.57191,  0.05070,  0.99181, 86.18340,
     +      0.17949,  2.63250,  2.67559, 34.57098, 36.77888, 54.06180,
     +      1.00609,  4.90414, 31.34909,  0.03699,  0.98700, 44.94354,
     +      0.18464,  1.47963,  5.20989, 24.79470, 32.06184, 39.09933,
     +      0.20060,  6.53262, 22.72092,  1.20022,  1.27398, 36.25907,
     +      0.44424,  3.36735, 19.63031,  0.01824, 23.51332,212.86819,
     +      0.18274,  2.06638, 16.99062, 11.57795, 13.97594,186.10446/
c
c    21 - 30
	data ((bb(i,j),i=1,6),j=21,30) /
     +      0.14245,  1.46588, 15.46955,  4.24287,  9.80399,121.46864,
     +      0.12782,  1.45591, 12.09738,  4.61747, 11.96791,105.00546,
     +      0.13126,  1.39923,  8.00762,  7.98129, 13.41408, 95.30811,
     +      0.12311,  2.38386,  9.92149,  1.64793, 11.00035, 68.45583,
     +      0.48173,  3.78306,  8.47337,  0.04690,  8.74544, 77.44405,
     +      0.44704,  6.89364,  6.90335,  0.05691,  3.02647, 70.86599,
     +      0.10705,  3.63573,  7.55825,  1.27986,  5.14045, 67.16051,
     +      0.11069,  1.61889,  6.00325,  5.97496,  6.06049, 59.41419,
     +      0.11293,  1.89077,  5.08503,  5.07335,  5.09928, 46.38955,
     *      0.10209,  1.73365,  4.78298,  4.80706,  5.64485, 51.21828/
c
c    31 - 40
	data ((bb(i,j),i=1,6),j=31,40) /
     +      0.10642,  1.53735,  5.13798,  4.74298,  4.99974, 61.42872,
     +      0.09583,  1.67715,  4.70275,  2.91198,  7.87009, 64.93623,
     +      0.09428,  2.21409,  3.95060,  1.52064, 15.81446, 52.41380,
     +      0.09252,  1.60168,  3.04917,  3.18476, 18.93890, 47.62742,
     +      0.09246,  1.77298,  3.48134,  1.88354, 22.68630, 40.69434,
     +      0.49321,  2.08254, 11.41282,  0.03333,  2.09673, 42.38068,
     +      0.15796,  1.71505,  9.39164,  1.67464, 23.58663,152.53635,
     +      0.36052,  2.12757, 12.45815,  0.01526,  2.10824,133.17088,
     +      0.09003,  1.41396,  2.05348, 10.25766, 10.74831, 90.63555,
     +      0.10094,  1.15419,  2.34669, 10.58145, 10.94962, 82.82259/
c
c    41 - 50
	data ((bb(i,j),i=1,6),j=41,50) /
     +      0.09243,  1.16977,  5.93969,  1.30554, 13.43475, 66.37486,
     +      0.43543,  1.24830,  7.45369,  0.03543,  9.91366, 61.72203,
     +      0.45943,  1.18155,  8.31728,  0.03226,  8.32296, 64.97874,
     +      0.08603,  1.39552, 11.69728,  1.39552,  3.45200, 55.55519,
     +      0.09214,  1.11341,  7.65767,  1.12566,  8.32517, 48.38017,
     +      0.09005,  1.12460,  9.69801,  1.08539,  5.70912, 33.48585,
     +      0.08938,  3.19060,  9.10000,  0.80898,  0.81439, 41.34453,
     +      0.28851,  1.61312,  8.99691,  0.01711,  9.46666, 58.13256,
     +      0.08948,  1.23258,  8.23129,  1.22390,  7.06201, 59.69622,
     +      0.07124,  0.85532,  6.40081,  1.33637,  6.38240, 50.92361/
c
c    51 - 60
	data ((bb(i,j),i=1,6),j=51,60) /
     +      0.35749,  1.32481,  6.51696,  0.03550,  6.51913, 50.80984,
     +      0.50089,  3.95301,  7.62830,  0.03005,  0.50737, 49.62628,
     +      0.08429,  1.12959,  8.86209,  1.12981,  9.13243, 56.01965,
     +      0.27796,  1.62147, 11.45200,  0.02032,  3.27497, 51.44078,
     +      0.12045,  1.53654,  9.81569, 41.21656, 42.62216,224.34816,
     +      0.12230,  1.44909,  9.50159, 49.40860, 74.94942,217.04485,
     +      0.08930,  1.26225,  8.09703,  1.20293, 17.65554,116.61481,
     +      0.08504,  1.28286, 11.22123,  1.32741,  4.61040,112.19678,
     +      0.09805,  1.52628,  8.58953,  1.23893, 22.49126,140.02856,
     +      0.09413,  1.26616,  5.98844, 17.78775, 18.14397,132.59305/
c
c    61 - 70
	data ((bb(i,j),i=1,6),j=61,70) /
     +      0.09447,  1.25111,  5.91205, 16.28675, 16.73089,127.90916,
     +      0.09061,  1.59281, 10.64077,  1.78861,  2.22148,124.56328,
     +      0.10485,  1.54396,  8.65223,  7.09290, 53.36537,183.69014,
     +      0.09338,  1.38681,  7.35883,  1.55122, 20.81916,111.03201,
     +      0.10190,  1.52368,  7.16923, 20.86269, 49.29465,166.09206,
     +      0.08402,  1.40890,  7.14042,  1.34848, 11.42203,108.01204,
     +      0.09441,  1.61807,  6.27142, 40.34946, 42.82722,130.59616,
     +      0.08211,  1.25106,  4.81241, 10.84493, 10.90164,100.07855,
     +      0.09662,  1.60236,  5.67480, 30.59014, 31.12732,138.69682,
     +      0.09493,  1.60220,  5.43916, 28.31076, 29.27660,138.08665/
c
c    71 - 80
	data ((bb(i,j),i=1,6),j=71,80) /
     +      0.09658,  1.56751,  5.32170, 34.18217, 35.25187,121.42893,
     +      0.09294,  1.55499,  5.25121, 37.51883, 38.88302,105.16978,
     +      0.06298,  0.81950,  2.89124,  5.54290,  5.98101, 54.42459,
     +      0.07902,  1.37096,  8.23364,  1.38300,  1.39219, 77.11813,
     +      0.05266,  0.90718,  4.43830,  0.94590,  4.37477, 43.97909,
     +      0.22700,  1.56975,  6.34451,  0.01564,  1.61769, 46.15815,
     +      0.05055,  0.86775,  5.09325,  0.88123,  3.56919, 39.77390,
     +      0.05253,  0.83773,  3.95899,  0.81515,  6.44217, 34.21146,
     +      0.54927,  1.72752,  6.71952,  0.02637,  0.07253, 35.45745,
     +      0.21941,  1.41611,  6.68241,  0.01472,  1.57578, 37.15826/
c
c    81 - 90
	data ((bb(i,j),i=1,6),j=81,90) /
     +      0.22459,  1.12822,  4.30289,  0.01485,  7.15607, 43.08737,
     +      0.06432,  1.19406,  7.39342,  1.14160,  1.28905, 51.13401,
     +      0.05380,  0.86719,  1.87540,  7.64796,  7.86794, 45.63897,
     +      0.50112,  1.63784,  6.78551,  0.02187,  0.08602, 46.72951,
     +      0.22321,  1.10827,  3.59116,  0.01011, 11.63732, 45.06839,
     +      0.21152,  1.14015,  3.41473,  0.01188, 13.41211, 43.11389,
     +      0.09435,  1.02649,  6.25480, 32.51444, 36.29119,149.11722,
     +      0.07300,  1.01825,  5.89629,  1.03089, 20.37389,115.34722,
     +      0.07515,  0.94941,  3.72527, 17.58346, 19.75388,109.12856,
     +      0.06385,  0.90194,  4.65715,  0.90253, 15.70771, 83.69695/
c
c    91 - 98
	data ((bb(i,j),i=1,6),j=91,98) /
     +      0.07557,  0.84920,  4.00991, 16.95003, 17.78767,100.20415,
     +      0.07142,  1.14907,  9.21231,  0.95923,  1.20275,104.32746,
     +      0.06918,  0.98102,  5.95437,  0.99086, 22.06437, 90.98156,
     +      0.07136,  0.95772,  6.13183,  0.97438, 15.67499, 89.86625,
     +      0.07301,  0.93267,  6.34836,  0.91032, 13.26179, 86.85986,
     +      0.05778,  0.72273,  3.01146,  9.21882,  9.53410, 65.86810,
     +      0.07088,  0.77587,  6.14295,  1.79036, 15.12379, 83.56983,
     +      0.06164,  0.81363,  6.56165,  0.83805,  4.18914, 61.41408/
c
c     for z = 0 a(i) will be zero and v, b(i) won't matter ! 
	a(1)	= 0.023933659 * real(z) / (3.0 * (1.0 + v(z)))
	a(2)	= v(z)    * a(1)
c
	do 10 i = 1, 6
		b(i)	= bb(i, z)
10	continue
c
	return
	end
     



c-------*********************************************************************
c-------*********************************************************************
c     added 23.11.2010, J. Barthel, Forschungszentrum Juelich GmbH
c     modified 30.06.2017, J. Barthel, Forschungszentrum Juelich GmbH
c     - added 'L ' for vacancy at z = 0
	subroutine getsymb (z, symbol)
	integer		z
	character*2	symbol
c
	character*2	sy (0:98)
c
        data sy /
     +  'L ',   
     +  'H ', 'He', 'Li', 'Be', 'B ', 'C ', 'N ', 'O ', 'F ', 'Ne',
     +  'Na', 'Mg', 'Al', 'Si', 'P ', 'S ', 'Cl', 'Ar', 'K ', 'Ca',
     +  'Sc', 'Ti', 'V ', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn',
     +  'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y ', 'Zr',
     +  'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn',
     +  'Sb', 'Te', 'I ', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd',
     +  'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',
     +  'Lu', 'Hf', 'Ta', 'W ', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg',
     +  'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th',
     +  'Pa', 'U ', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf'/
c
	symbol	= sy(z)
c
	return
	end
	
	
